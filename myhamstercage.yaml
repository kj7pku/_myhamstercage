apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: myhamstercage-ingress
  annotations:
    external-dns.alpha.kubernetes.io/hostname: "myhamstercage.com"
    service.beta.kubernetes.io/do-loadbalancer-algorithmi: "round_robin"
    service.beta.kubernetes.io/do-loadbalancer-certificate-id: "634ca9d3-f4ae-4c59-ac2b-9c4cdf1319b4"
    service.beta.kubernetes.io/do-loadbalancer-protocol: "http"
    service.beta.kubernetes.io/do-loadbalancer-redirect-http-to-https: "true"
    service.beta.kubernetes.io/do-loadbalancer-tls-ports: "443"
spec:
  rules:
    - host: myhamstercage.com
      http:
        paths:
          - path: /
            backend:
              serviceName: myhamstercage-service
              servicePort: 80
          - path: /test
            backend:
              serviceName: myhamstercage-service
              servicePort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: myhamstercage-service

spec:
  type: ClusterIP
  selector:
    app: myhamstercage
  ports:
    - name: http
      port: 80
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myhamstercage
spec:
  selector:
    matchLabels:
      app: myhamstercage
  replicas: 3
  template:
    metadata:
      labels:
        app: myhamstercage
    spec:
      containers:
        - name: myhamstercage-container
          image: kj7pku/myhamstercage
          ports:
            - containerPort: 3000
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  name: rewrite
  namespace: default
spec:
  rules:
    - host: myhamstercage.com
      http:
        paths:
          - backend:
              serviceName: myhamstercage-service
              servicePort: 80
            path: /test(/|$)(.*)